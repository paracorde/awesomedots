config_dir = os.getenv("HOME").."/.config/awesome"
bin_dir = os.getenv("HOME").."/.config/bin"

theme = "{{ general['name'] }}"
theme_dir = config_dir.."/"..theme

-- user settings
user = {
    term = "kitty --single-instance",
    browser = "firefox",
    file_manager = "nautilus",
    editor = "kitty --single-instance --class editor -e nvim",
    music_client = "kitty --single-instance --class music -e ncmpcpp",

    profile = config_dir.."/profile.png",

    dirs = {
        desktop = os.getenv("HOME").."/Desktop",
        downloads = os.getenv("HOME").."/Downloads",
        documents = os.getenv("HOME").."/Documents",
        music = os.getenv("HOME").."/Music",
        pictures = os.getenv("HOME").."/Pictures",
        videos = os.getenv("HOME").."/Videos",
        screenshots = os.getenv("HOME").."/Pictures/scrots",
        albumart = os.getenv("HOME").."/.config/mpd/previews",
        cache = os.getenv("HOME").."/.cache"
    }
}

-- theme settings, provided with jinja theme loader
x = {
    background = "{{ background }}",
    foreground = "{{ foreground }}",
    color0     = "{{ color[0] }}",
    color1     = "{{ color[1] }}",
    color2     = "{{ color[2] }}",
    color3     = "{{ color[3] }}",
    color4     = "{{ color[4] }}",
    color5     = "{{ color[5] }}",
    color6     = "{{ color[6] }}",
    color7     = "{{ color[7] }}",
    color8     = "{{ color[8] }}",
    color9     = "{{ color[9] }}",
    color10    = "{{ color[10] }}",
    color11    = "{{ color[11] }}",
    color12    = "{{ color[12] }}",
    color13    = "{{ color[13] }}",
    color14    = "{{ color[14] }}",
    color15    = "{{ color[15] }}",
    radius     = {{ radius }},
}

-- imports
local awful = require("awful")
require("awful.autofocus")
local beautiful = require("beautiful")
local gears = require("gears")
local naughty = require("naughty")
local ruled = require("ruled")
local wibox = require("wibox")

-- dpi function
dpi = beautiful.xresources.apply_dpi

-- initialize theme
beautiful.init(theme_dir.."/theme.lua")

-- initialize hotkeys
local keys = require("keys")

-- set valid layouts
awful.layout.append_default_layouts({
    awful.layout.suit.tile,
    awful.layout.suit.floating,
    awful.layout.suit.max,
})

-- set wallpaper
screen.connect_signal("request::wallpaper", function(s)
    awful.wallpaper{
        screen = s,
        widget = {
            {
                image = theme_dir.."/wallpaper.png",
                upscale = true,
                downscale = true,
                widget = wibox.widget.imagebox,
            },
            valign = "center",
            halign = "center",
            tiled = false,
            widget = wibox.container.tile,
        }
    }
end)

-- set separate tags for every screen
awful.screen.connect_for_each_screen(function(s)
    -- each screen has its own tag table
    -- tag layouts
    local layouts = {
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile,
        awful.layout.suit.tile
    }

    -- set tagnames
    -- local tagnames = beautiful.tagnames or { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }
    local tagnames = beautiful.tagnames or { "1", "2", "3", "4", "5", "6" }
    -- create all tags with same configuration
    awful.tag(tagnames, s, layouts)
end)
 
-- helper floating client placement functions
local floating_client_placement = function(c)
    -- center if floating or sole visible client
    if awful.layout.get(mouse.screen) ~= awful.layout.suit.floating or #mouse.screen.clients == 1 then
        return awful.placement.centered(c, {honor_padding = true, honor_workarea = true})
    end
    -- otherwise use this
    local p = awful.placement.no_overlap + awful.placement.no_offscreen
    return p(c, {honor_padding = true, honor_workarea = true, margins = beautiful.useless_gap * 2})
end
local centered_client_placement = function(c)
    return gears.timer.delayed_call(function()
        awful.placement.centered(c, {honor_padding = true, honor_workarea = true})
    end)
end

-- client rules
ruled.client.append_rules({
    { -- apply to all clients
        id = "global",
        rule = {},
        properties = {
            border_width = beautiful.border_width,
            border_color = beautiful.border_normal,
            focus = awful.client.focus.filter,
            raise = true,
            keys = keys.client_keys,
            buttons = keys.client_buttons,
            -- screen = awful.screen.preferred,
            screen = awful.screen.focused,
            size_hints_honor = false,
            honor_workarea = true,
            honor_padding = true,
            maximized = false,
            titlebars_enabled = beautiful.titlebars_enabled,
            maximized_horizontal = false,
            maximized_vertical = false,
            placement = floating_client_placement
        }
    },
    { -- set to floating
        rule_any = {
            instance = {
                "floating_terminal"
            },
            type = {
                "dialog"
            }
        },
        properties = {floating = true}
    },
    { -- center client
        rule_any = {
            type = {
                "dialog",
            },
            class = {
                "Steam",
                "discord",
                "music",
                "markdown_input",
                "scratchpad",
            },
            instance = {
                "music",
                "markdown_input",
                "scratchpad",
            },
            role = {
                "GtkFileChooserDialog",
                "conversation",
            }
        },
        properties = {placement = centered_client_placement},
    },
    { -- set specific size for floating terminals
        rule_any = {
            class = {
                "Alacritty",
                "Termite",
                "mpvtube",
                "kitty",
                "st-256color",
                "st",
                "URxvt",
            },
        },
        properties = {width = awful.screen.focused().geometry.width * 0.45, height = awful.screen.focused().geometry.height * 0.5}
    },
})

-- notification rules
ruled.notification.connect_signal('request::rules', function()
    -- matches all clients
    ruled.notification.append_rule{
        rule = {},
        properties = {
            position = "top_right"
        }
    }
end)

-- set new clients to spawn to the right of existing clients
client.connect_signal("manage", function (c)
    if not awesome.startup then awful.client.setslave(c) end
end)

-- raise focused clients
client.connect_signal("focus", function(c) c:raise() end)

-- spawn autorun programs
awful.spawn.with_shell("~/.config/awesome/autorun.sh")

-- set decorations
local decorations = require(theme..".decorations")

-- load meow
local meow = require("meow")

-- load notifications
local notifications = require(".notifications")
-- and notification theme modifier
local dnotifications = require(theme..".notifications")

-- add bar
local bar = require(theme..".bar")

-- add dashboard, launcher, and other widgets
local dash = require(theme..".dash")
local launcher = require(theme..".launcher")

-- initialize hotkeys
root.keys(gears.table.join(
    keys.global_keys,
    awful.key({"Mod4"}, "F1", function()
        if dash then
            dash.dash_grabber:start()
        end
    end),
    awful.key({"Control", "Shift"}, "space", function()
        if launcher then
            launcher.launcher_grabber:start()
        end
    end)
))

-- awful.spawn.with_shell("kitty load {{ general['name'] }}")
awful.spawn.with_shell("picom > "..user.dirs.cache.."/picom")